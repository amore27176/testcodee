services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./src:/var/www/html
      - ./docker/nginx:/etc/nginx/conf.d
    networks:
      - app-network
    depends_on:
      - php
      - mysql

  php:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    volumes:
      - ./src:/var/www/html
    networks:
      - app-network
    environment:
      - DB_HOST=mysql
    healthcheck:
      # Добавляем проверку для PHP-FPM
      test: [ "CMD", "curl", "-f", "http://localhost:9000/ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: myapp
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-psecret" ] # Исправленная проверка
      interval: 5s
      timeout: 10s
      retries: 10

  phpmyadmin:
    image: phpmyadmin:latest
    environment:
      PMA_HOST: mysql
      PMA_USER: root
      PMA_PASSWORD: secret
    ports:
      - "8080:80"
    networks:
      - app-network
    depends_on:
      mysql:
        condition: service_healthy

  composer:
    image: composer:latest
    volumes:
      - ./src:/var/www/html # Монтируем исходный код
      - composer-cache:/tmp # Кеширование пакетов
    environment:
      - DB_HOST=mysql # Переменные окружения, если нужны
    networks:
      - app-network
    working_dir: /var/www/html # Рабочая директория внутри контейнера
    depends_on:
      - mysql # Если нужны зависимости для БД
      - php

volumes:
  mysql_data:
  composer-cache:
    # Добавляем volume для кеша

networks:
  app-network:
    driver: bridge
